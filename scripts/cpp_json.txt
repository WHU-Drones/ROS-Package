{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.

	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"ROS node class hpp": {
		"prefix": "nodehpp",
		"body": [
			"#pragma once",
			"",
			"#include <ros/ros.h>",
			"//#include <dynamic_reconfigure/server.h>",
			"",
			"//#include \"${1:$TM_FILENAME_BASE}Config.h\"",
			"",
			"class ${1:$TM_FILENAME_BASE}:public ${3:ParentClass}",
			"{",
			"public:",
			"    ${1:$TM_FILENAME_BASE}(ros::NodeHandle &nh);",
			"    ~${1:$TM_FILENAME_BASE}();",
			"    void Run();",
			"",
			"private:",
			"    ros::NodeHandle nh_;",
			"    std::string node_name_;",
			"    ",
			"    //std::string member_param_name_;",
			"    ",
			"    //dynamic_reconfigure::Server<${2:PackageName}::${1:$TM_FILENAME_BASE}Config> dynamic_param_server_;",
			"    //dynamic_reconfigure::Server<${2:PackageName}::${1:$TM_FILENAME_BASE}Config>::CallbackType f_;",
			"    ",
			"    void PublisherInit();",
			"    void SubscriberInit();",
			"    void ServiceInit();",
			"    void ClientInit();",
			"    void ActionInit();",
			"    void DynamicParamInit();",
			"    //void DynamicParamServer_callback(${2:PackageName}::${1:$TM_FILENAME_BASE}Config &config, uint32_t level);",
			"};",
			"$0"
		],
		"description": "Create ros node class hpp"
	},
	"ROS node class cpp": {
		"prefix": "nodecpp",
		"body": [
			"#include \"${1:$TM_FILENAME_BASE}.hpp\"",
			"",
			"${1:$TM_FILENAME_BASE}::${1:$TM_FILENAME_BASE}(ros::NodeHandle &nh):nh_(nh) {",
			"    node_name_ = ros::this_node::getName();",
			"    //nh_.param<std::string>(node_name_ + \"/member_param_name\", member_param_name_, \"DefaultValue\");",
			"    ",
			"    PublisherInit();",
			"    SubscriberInit();",
			"    ServiceInit();",
			"    ClientInit();",
			"    ActionInit();",
			"    DynamicParamInit();",
			"}",
			"",
			"${1:$TM_FILENAME_BASE}::~${1:$TM_FILENAME_BASE}() {}",
			"",
			"void ${1:$TM_FILENAME_BASE}::Run() {}",
			"",
			"//void ${1:$TM_FILENAME_BASE}::DynamicParamServer_callback(${2:PackageName}::${1:$TM_FILENAME_BASE}Config &config, uint32_t level) {}",
			"",
			"void ${1:$TM_FILENAME_BASE}::PublisherInit() {}",
			"",
			"void ${1:$TM_FILENAME_BASE}::SubscriberInit() {}",
			"",
			"void ${1:$TM_FILENAME_BASE}::ServiceInit() {}",
			"",
			"void ${1:$TM_FILENAME_BASE}::ClientInit() {}",
			"",
			"void ${1:$TM_FILENAME_BASE}::ActionInit() {}",
			"",
			"void ${1:$TM_FILENAME_BASE}::DynamicParamInit() {",
			"    //f_ = boost::bind(&${1:$TM_FILENAME_BASE}::DynamicParamServer_callback, this, _1, _2);",
			"    //dynamic_param_server_.setCallback(f_);",
			"}",
			"$0"
		],
		"description": "Create ros node class cpp"
	},

	"ROS publisher": {
		"prefix": "publisher",
		"body": [
			"${1:Name}_publisher_ = nh_.advertise<${2:DataType}>(${1:Name}_topic_, ${3:5}, true);",
			"$0"
		],
		"description": "Create a ros publisher"
	},

	"ROS subscriber": {
		"prefix": "subscriber",
		"body": [
			"${1:Name}_subscriber_ = nh_.subscribe<${2:DataType}>(${1:Name}_topic_, ${3:5}, &$TM_FILENAME_BASE::${4:CallbackName}_callback, this);",
			"$0"
		],
		"description": "Create a ros subscriber"
	},

	"ROS subscriber callback": {
		"prefix": "subscriber_callback",
		"body": [
			"void $TM_FILENAME_BASE::${1:Name}_callback(const ${2:DataType}ConstPtr& msg)",
			"{",
			"    $0",
			"}"
		],
		"description": "Create a ros subscriber callback"
	},
}